package exploit

//package exploit uses reflection to execute the optional function specified by the exploitFn attribute in the rule configuraiton file.
//awsSTS.go contains the implementation of one such function, namely AwsSTS that is used in the sample configuration file.
//Note the function must use the Exploit receiver and the function name given in the configuration file must be identical to the name used in the function declaration.

import (
	"errors"
	"reflect"
)

//Exploit is the receiver used to run the optional configurable function, exploitFn.  Secret is the detected secret found in the file specified in Filename.
//Fn is the name of the function found by reflection.  Fn may set any JSON formatted data in the Output field.  When not empty, Output will be written to the output defect report
//under AdditionalInfo
type Exploit struct {
	Fn       string
	Secret   string
	Filename string
	Output   string //strategy specific information set by the strategy method
}

//Run executes configured ExploitFn
func (this *Exploit) Run() (err error) {

	exploitFn := this.getExploitFunction()
	return exploitFn()
}

//TryGetExploitFunction Use reflection to attempt linkage to configured ExploitFn.
func TryGetExploitFunction(expolitFnName string) (err error) {
	defer func() {
		if r := recover(); r != nil {
			generalErrorMsg := "Error reflecting on Exploit function " + expolitFnName
			switch r.(type) {
			case error:
				err = r.(error)
			default:
				err = errors.New(generalErrorMsg)

			}
		}
	}()
	arbitraryExploit := Exploit{Fn: expolitFnName}
	arbitraryExploit.getExploitFunction()
	return
}

func (this *Exploit) getExploitFunction() (exploitFn func() error) {
	return reflect.ValueOf(this).MethodByName(this.Fn).Interface().(func() error)
}
